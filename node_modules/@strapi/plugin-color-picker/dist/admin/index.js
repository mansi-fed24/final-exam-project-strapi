'use strict';

var ColorPickerIcon = require('./components/ColorPickerIcon.js');
var pluginId = require('./pluginId.js');
var getTrad = require('./utils/getTrad.js');
var prefixPluginTranslations = require('./utils/prefixPluginTranslations.js');

function _interopNamespaceDefaultOnly (e) { return Object.freeze({ __proto__: null, default: e }); }

function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case './translations/cs.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/cs.json.js')); });
    case './translations/en.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/en.json.js')); });
    case './translations/ru.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/ru.json.js')); });
    case './translations/sv.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/sv.json.js')); });
    case './translations/tr.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/tr.json.js')); });
    case './translations/uk.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/uk.json.js')); });
    case './translations/zh.json': return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespaceDefaultOnly(require('./translations/zh.json.js')); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
// eslint-disable-next-line import/no-default-export
var index = {
    /**
   * TODO: we need to have the type for StrapiApp done from `@strapi/admin` package.
   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    register (app) {
        app.customFields.register({
            name: 'color',
            pluginId: 'color-picker',
            type: 'string',
            icon: ColorPickerIcon.ColorPickerIcon,
            intlLabel: {
                id: getTrad.getTrad('color-picker.label'),
                defaultMessage: 'Color'
            },
            intlDescription: {
                id: getTrad.getTrad('color-picker.description'),
                defaultMessage: 'Select any color'
            },
            components: {
                Input: async ()=>Promise.resolve().then(function () { return require('./components/ColorPickerInput.js'); }).then((module)=>({
                            default: module.ColorPickerInput
                        }))
            },
            options: {
                advanced: [
                    {
                        intlLabel: {
                            id: getTrad.getTrad('color-picker.options.advanced.regex'),
                            defaultMessage: 'RegExp pattern'
                        },
                        name: 'regex',
                        type: 'text',
                        defaultValue: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$',
                        description: {
                            id: getTrad.getTrad('color-picker.options.advanced.regex.description'),
                            defaultMessage: 'The text of the regular expression'
                        }
                    },
                    {
                        sectionTitle: {
                            id: 'global.settings',
                            defaultMessage: 'Settings'
                        },
                        items: [
                            {
                                name: 'required',
                                type: 'checkbox',
                                intlLabel: {
                                    id: getTrad.getTrad('color-picker.options.advanced.requiredField'),
                                    defaultMessage: 'Required field'
                                },
                                description: {
                                    id: getTrad.getTrad('color-picker.options.advanced.requiredField.description'),
                                    defaultMessage: "You won't be able to create an entry if this field is empty"
                                }
                            }
                        ]
                    }
                ]
            }
        });
    },
    async registerTrads ({ locales }) {
        const importedTrads = await Promise.all(locales.map((locale)=>{
            return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data })=>{
                return {
                    data: prefixPluginTranslations.prefixPluginTranslations(data, pluginId.pluginId),
                    locale
                };
            }).catch(()=>{
                return {
                    data: {},
                    locale
                };
            });
        }));
        return Promise.resolve(importedTrads);
    }
};

module.exports = index;
//# sourceMappingURL=index.js.map
